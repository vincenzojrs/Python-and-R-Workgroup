  #import Pandas library to import, view and edit dataframes
  #import matplotlib and numpy to create graphs
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from matplotlib import gridspec

  #creation of a string containing all the available API, then an empty dictionary to which, through a loop "for", I associate the key corresponding to each API, with the content json of the same API 
api = ["films","people","locations", "species","vehicles"]
d = {}
for i in api:
  d[i] = pd.read_json(('https://ghibliapi.herokuapp.com/'+i))

  #delete columns not needed for data manipulation and reorder them 
d["films"] = d["films"].drop(columns=d["films"].columns[[4,5,-1,-2,-3,-4,-5]])
d["films"] = d["films"].iloc[:, [1,2,3,4,5,6,7,8,9,0]]

  #delete columns not needed for data manipulation and reorder them, also for the second dataframe
d["people"] = d["people"].drop(columns=d["people"].columns[[-1,-2,-3,-4]])
d["people"] = d["people"].iloc[:, [1,2,3,4,5,0]]

  #since the last 3 dataframes need the same changes, we use a "for loop" for each entry in the dictionary and if the entry is one of the last 3 in the list with the parameters associated with the different dataframes --> implements the change 
for i in d:
  if i in api[2:]:
    d[i].drop(columns=d[i].columns[[-1,-2,-3]])
    d[i] = d[i].iloc[:,[1,2,3,4,0]]

  #for each dictionary entry, saves a csv file with the "dictionaryentry+dataframe.csv"
for i in d:
  d[i].to_csv((i+"dataframe.csv"))   

  #let's start the graphical analysis
  #after importing matplotlib and numpy, we use gridspec to create advanced subplot
fig1 = plt.figure(1, figsize=(16,9))
gs1 = gridspec.GridSpec(1,2)
gs1.update(wspace=0.5)

  #we start with the analysis of the gender distribution among the people 
plt.suptitle("Graphical Analysis for the \"People\" Studio Ghibli API", size=16, y=0.9)
plt.style.use("ggplot")

  #first step is to find the distribution of each gender in the dataframe "people"
male = d["people"].loc[d["people"]['gender'] == 'Male']. count()[0]
female = d["people"].loc[d["people"]['gender'] == 'Female']. count()[0]
other=len(d["people"]) - male - female

  #another step is to build a pie chart with our gender data
subplot1 = fig1.add_subplot(gs1[0,0])
labels = ['male', 'female', 'other']
plt.pie([male,female,other], labels = labels, autopct='%.2f %%' )
plt.title("Gender distribution among people")

  #we build another pie chart. this time we plot the distribution of the eye color 
subplot2 = fig1.add_subplot(gs1[0,1])
d["people"].groupby('eye_color').size().plot(kind='pie', autopct='%.2f%%', title="Eye color distribution among people", pctdistance=0.8, explode=(0.2, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4))
plt.savefig("fig2.png", dpi=300)

  #we create another advanced subplot with gridspec. this time we analyze the dataframe "Films" 
fig2 = plt.figure(1, figsize=(16,9))
gs2 = gridspec.GridSpec(6,4)
gs2.update(wspace=0.5, hspace=100)
plt.suptitle("Graphical Analysis for the \"Films\" Studio Ghibli API", size=16, y=1)
plt.style.use("ggplot")

  #barplot graph to display the number of films realized by each director. Edited yticks a rotated xticks to fit them to the data
subplot3 = fig2.add_subplot(gs2[0:2,0:4])
d["films"]["director"].value_counts().plot(kind='bar', title='Number of films per director\n')
plt.yticks(np.arange(1,10,2))
plt.xticks(rotation=5)

  #barplot graph to display the number of films realized by each producer. Edited yticks a rotated xticks to fit them to the data
subplot4 = fig2.add_subplot(gs2[2:4,0:4])
d["films"]["producer"].value_counts().plot(kind='bar', title='Number of films per producer\n', color="#0080b0")
plt.yticks(np.arange(1,15,3))
plt.xticks(rotation=5)

  #boxplot graph to display the median, quartiles, and outliers for running times. deleted xlabels and ticks because they're not needed
subplot5 = fig2.add_subplot(gs2[4:6,0:1])
d["films"]["running_time"].plot(kind='box', title='Statistical distribution for running times\n', color="#0080b0")
plt.ylabel("Minutes")
subplot3.tick_params(labelbottom=False)
subplot3.tick_params(bottom=False)

  #scatterplot to display the relationship between the release date and the score
subplot6 = fig2.add_subplot(gs2[4:6,1:4])
plt.title("Average films scores per year\n")
plt.plot(d["films"]["release_date"], d["films"]["rt_score"], label="Average films scores per year")
plt.legend()

  #save the high quality grid
plt.savefig("fig2.png", dpi=300)

fig3 = plt.figure(1, figsize=(21,9))
gs3 = gridspec.GridSpec(2,1)
gs3.update(hspace=0.9)
plt.suptitle("Graphical Analysis for the \"Locations\" Studio Ghibli API", size=16, y=1)
plt.style.use("ggplot")

  #plotting to display surface water in each city
subplot7 = fig3.add_subplot(gs3[0,0])
d["locations"].index = d["locations"]["name"]
plt.plot(d["locations"]["surface_water"])
plt.title("Surface Water distribution for each location\n")
plt.xticks(rotation=45)

  #plotting to display climate distribution
subplot8 = fig3.add_subplot(gs3[1,0])
d["locations"]["climate"].value_counts().plot(kind='bar', title='Climate distribution for each location\n', color="#0080b0")

plt.savefig("fig3.png", dpi=300)
